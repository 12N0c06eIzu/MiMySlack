{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"input-group px-3 pb-3\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"input\", {\n    type: \"hidden\",\n    value: $props.inputId\n  }, null, 8, _hoisted_2), _createElementVNode(\"input\", {\n    type: \"hidden\",\n    value: $props.sendMode\n  }, null, 8, _hoisted_3), _withDirectives(_createElementVNode(\"textarea\", {\n    type: \"text\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.text = $event),\n    onKeydown: _cache[1] || (_cache[1] = (...args) => $options.sendText && $options.sendText(...args))\n  }, null, 544), [[_vModelText, $data.text]]), _createElementVNode(\"button\", {\n    class: \"btn btn-outline-secondary\",\n    \"on:click\": _cache[2] || (_cache[2] = (...args) => $options.send && $options.send(...args))\n  }, \"OK\", 32)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAuB;;;;uBAAlCC,oBAUM,OAVNC,UAUM,GATJC,oBAAwC;IAAjCC,IAAI,EAAC,QAAQ;IAAEC,KAAK,EAAEC;2BAC7BH,oBAAyC;IAAlCC,IAAI,EAAC,QAAQ;IAAEC,KAAK,EAAEC;2CAC7BH,oBAKE;IAJAC,IAAI,EAAC,MAAM;IACXJ,KAAK,EAAC,cAAc;+DACXO,UAAI;IACZC,SAAO,yCAAEC,+CAAQ;gCADTF,UAAI,KAGfJ,oBAAoE;IAA5DH,KAAK,EAAC,2BAA2B;IAAE,UAAM,yCAAES,uCAAI;KAAE,IAAE","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","type","value","$props","$data","onKeydown","$options"],"sourceRoot":"","sources":["C:\\Users\\ritu6\\Documents\\study\\js\\express\\MySlack\\src\\components\\InputForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"input-group px-3 pb-3\">\r\n    <input type=\"hidden\" :value=\"inputId\" />\r\n    <input type=\"hidden\" :value=\"sendMode\" />\r\n    <textarea\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      v-model=\"text\"\r\n      @keydown=\"sendText\"\r\n    />\r\n    <button class=\"btn btn-outline-secondary\" @:click=\"send\">OK</button>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n// @ is an alias to /src\r\n// import HelloWorld from '@/components/HelloWorld.vue'\r\nimport axios from \"axios\";\r\n// import { Splitpanes, Pane } from \"splitpanes\";\r\nexport default {\r\n  name: \"InputFormView\",\r\n  props: {\r\n    title: String,\r\n    inputId: Number,\r\n    sendMode: String,\r\n  },\r\n  components: {},\r\n  data() {\r\n    return {\r\n      text: \"\",\r\n      keyCodeBefore: null,\r\n    };\r\n  },\r\n  methods: {\r\n    send: function () {\r\n      console.log(\"送信モード: \" + this.sendMode);\r\n      console.log(\"送信先ID: \" + this.inputId);\r\n      console.log(\"送信メッセージ: \" + this.text);\r\n      if (this.inputId <= 0) {\r\n        console.log(\"送信先のIDが0のため不正です。\");\r\n        return \"error\";\r\n      }\r\n      if (this.text == \"\") {\r\n        console.log(\"テキストが空のため不正です。\");\r\n        return \"error\";\r\n      }\r\n      let url = \"\";\r\n      let route = [];\r\n      let data = {};\r\n      // URLだけ調節するようにする方がコードがシンプルになりそう。\r\n      switch (this.sendMode) {\r\n        case \"S0001\":\r\n          console.log(this.sendMode);\r\n          break;\r\n\r\n        case \"S0002\":\r\n          url = \"http://localhost:3000/spaces/\";\r\n          route.push(\"create\", \"searchSpaces?pk_wid=\");\r\n          console.log(this.sendMode);\r\n          // データをJSON形式で保存して積んでいく\r\n          data = {\r\n            // parentID\r\n            pid: this.inputId,\r\n            // childId\r\n            // ここ積んでるけど使ってませんし登録してません\r\n            cid: this.$store.state.authFunction.userId,\r\n            // DM Flag\r\n            dc_flag: 0,\r\n            // content\r\n            content: this.text,\r\n          };\r\n          break;\r\n\r\n        case \"S0003\":\r\n          url = \"http://localhost:3000/threads/\";\r\n          route.push(\"create\", \"searchThreads?id=\");\r\n          console.log(this.sendMode);\r\n          // データをJSON形式で保存して積んでいく\r\n          data = {\r\n            // parentID\r\n            pid: this.inputId,\r\n            // childId\r\n            cid: this.$store.state.authFunction.userId,\r\n            // content\r\n            content: this.text,\r\n          };\r\n          break;\r\n\r\n        case \"S0004\":\r\n          url = \"http://localhost:3000/comments/\";\r\n          route.push(\"create\", \"searchComments?id=\");\r\n          console.log(this.sendMode);\r\n          // データをJSON形式で保存して積んでいく\r\n          data = {\r\n            // parentID\r\n            pid: this.inputId,\r\n            // childId\r\n            cid: this.$store.state.authFunction.userId,\r\n            // content\r\n            content: this.text,\r\n          };\r\n          break;\r\n\r\n        default:\r\n          console.log(\"送信処理分岐の対象外\");\r\n          break;\r\n      }\r\n      // URLを動的に変更\r\n      axios.post(url + route[0], data).then((res) => {\r\n        // console.log(res.data);\r\n        axios.get(url + route[1] + this.inputId).then((res) => {\r\n          switch (this.sendMode) {\r\n            case \"S0001\":\r\n              break;\r\n            case \"S0002\":\r\n              this.$store.state.spaceFunction.spaceList.data = res.data;\r\n              break;\r\n            case \"S0003\":\r\n              this.$store.state.threadFunction.threadList.data = res.data;\r\n              break;\r\n            case \"S0004\":\r\n              this.$store.state.commentFunction.commentList.data = res.data;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          // 入力値を初期化\r\n          this.text = \"\";\r\n        });\r\n        console.log(res.data);\r\n      });\r\n    },\r\n    /**\r\n     * Control(Code: 17)を直前に押下していた場合\r\n     * 投稿するメソッドを発火させる。\r\n     * @param {*} e \r\n     * keyCode: キーコード\r\n     * key: キー名\r\n     */\r\n    sendText: function (e) {\r\n      console.log(e.keyCode);\r\n      if (this.keyCodeBefore == 17) {\r\n        console.log(\"koko\");\r\n        if (e.keyCode == 13) {\r\n          this.send();\r\n        }\r\n      }\r\n      // 直前に入力したキーのコードを保存する。\r\n      this.keyCodeBefore = e.keyCode;\r\n    },\r\n  },\r\n  mounted() {},\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}